/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

// This program reads a 4x4 keypad matrix and prints the button pressed
#include <stdint.h>


int main(void)
{
	uint32_t volatile *const pClkControl = (uint32_t*) 0x40023830;
    uint32_t volatile *const pGpioDMode = (uint32_t*) 0x40020C00;
    uint32_t volatile *const pGpioDOutputData = (uint32_t*) 0x40020C14;
    uint32_t const volatile *const pGpioDInputRead = (uint32_t*) 0x40020C10;
    uint32_t volatile *const pPUPDRGpioD = (uint32_t*) 0x40020C0C;

    //enables AHB1ENR clock for Gpio D
    *pClkControl |= (1<<3);
    *pClkControl |= 1;

    //Clear Mode for PD 3 2 1 0 then set to Output mode, these are the rows for keypad matrix
    *pGpioDMode &= ~(0xFF);
    *pGpioDMode |= 0x55;

    //Clear Mode for PD 11 10 9 8 to make sure they are in input mode, these are the columns of the matrix
    *pGpioDMode &= ~(0xFF<<16);

    //Clear Pull up pull down resistors for inputs, then set them to pull up mode
    *pPUPDRGpioD &= ~(0xFF<<16);
    *pGpioDMode |= (0x55<<16);

    //Set all rows to HIGH
    *pGpioDOutputData |= 0xF;

    *pGpioDMode &= ~(3<<24);
    *pGpioDMode |= (1<<24);
    //infinite loop
    while(1){
    	//Read column statuses

    	uint16_t volatile col2_Status = (uint16_t) *pGpioDInputRead & 0x200;  //PD9
    	uint16_t volatile col3_Status = (uint16_t) *pGpioDInputRead & 0x400;  //PD10
    	uint16_t volatile col4_Status = (uint16_t) *pGpioDInputRead & 0x800;  //PD11

    	//We will make Row1 (PD0) to be a low state, and then read the columns. Whichever column is also low,
    	//than that is the button pressed
    	*pGpioDOutputData &= ~(0x1);
    	uint16_t volatile col1_Status = (uint16_t) *pGpioDInputRead & 0x100;  //PD8
    	if(col1_Status == 0)
    		*pGpioDOutputData |= (1<<12);
    		//printf("\n1\n");


    }



    /* Loop forever */
	for(;;);
}
